version: "3.8"

services:
  postgres:
    image: postgis/postgis:14-3.2-alpine
    container_name: dvf-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: dvf_user
      POSTGRES_PASSWORD: dvf_password
      POSTGRES_DB: dvf_data
      # PostgreSQL memory optimization for 2GB system
      POSTGRES_SHARED_BUFFERS: "128MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "256MB"
      POSTGRES_WORK_MEM: "4MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "64MB"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dvf_user -d dvf_data"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Optimized for 2GB total system RAM
    deploy:
      resources:
        limits:
          memory: 512M # ~25% of total RAM
        reservations:
          memory: 256M
    command: >
      postgres 
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c max_connections=50
      -c random_page_cost=1.1

  dvf-importer:
    build:
      context: .
      dockerfile: Dockerfile.importer
    container_name: dvf-importer
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: dvf_user
      POSTGRES_PASSWORD: dvf_password
      POSTGRES_DB: dvf_data
      POSTGRES_PORT: "5432"
      DVF_START_YEAR: "${DVF_START_YEAR:-2020}"
      DVF_END_YEAR: "${DVF_END_YEAR:-2024}"
      DVF_CHUNK_SIZE: "${DVF_CHUNK_SIZE:-5000}"
      DVF_MAX_MEMORY: "${DVF_MAX_MEMORY:-128}"
    volumes:
      - ./logs:/app/logs
    restart: "no" # Run once and exit
    deploy:
      resources:
        limits:
          memory: 768M # Increased from 256M to handle large CSV processing
        reservations:
          memory: 512M

  flask-api:
    build:
      context: .
      dockerfile: Dockerfile.flask
    container_name: dvf-flask-api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: dvf_user
      POSTGRES_PASSWORD: dvf_password
      POSTGRES_DB: dvf_data
      POSTGRES_PORT: "5432"
      FLASK_ENV: production
      PORT: "6644"
    ports:
      - "6644:6644"
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6644/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  postgres_data:
